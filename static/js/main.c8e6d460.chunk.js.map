{"version":3,"sources":["components/Card/index.js","components/Grid/index.js","components/Wrapper/index.js","components/Scoreboard/index.js","components/Header/index.js","components/Modal/index.js","components/MusicBed/index.js","App.js","index.js"],"names":["Card","props","className","onClick","handlerCardClick","src","image","id","alt","name","styles","cardContainer","display","gridTemplateColumns","gridTemplateRows","Header","style","characters","map","character","key","Wrapper","children","scoreBoard","fontSize","float","letterSpacing","textAlign","lineHeight","score","Scoreboard","highScore","jumbotron","margin","borderRadius","padding","backgroundColor","instructions","title","fontFamily","fontKerning","color","WebkitTextStroke","textShadow","container","gif","maxWidth","GameModal","aria-labelledby","show","showModal","centered","closeButton","Title","modalTitle","Body","modalGif","Footer","hideModal","MusicBed","type","loop","autoPlay","App","state","charactersClicked","event","target","handlerCardShuffle","handlerGameCalculation","arr","i","length","j","Math","floor","random","handlerHideModal","setState","includes","gifs","loss","win","push","this","Grid","close","handlerCloseModal","onHide","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8e6d460.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n\n    return (\n        <figure className=\"figure hvr-grow-shadow\">\n            <img onClick={props.handlerCardClick} src={props.image} id={props.id} alt={props.name} className=\"figure-img img-fluid rounded\" />\n        </figure>\n    );\n}\n\nexport default Card;\n\n","import React from \"react\";\nimport Card from \"../Card\";\n\nconst styles = {\n    cardContainer : {\n        display : \"grid\",\n        gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n        gridTemplateRows: \"1fr 1fr 1fr\"\n    }\n}\n\nfunction Header(props) {\n    return (\n        <div style={styles.cardContainer}>\n            {/* For each character in the array, create a new card. */}\n            {props.characters.map(character => (<Card key={character.id} handlerCardClick={props.handlerCardClick} name={character.name} id={character.id} image={character.image}/>))}\n        </div>\n    );\n};\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\n\nconst styles = {\n    scoreBoard : {\n        display : \"inline-block\",\n        fontSize : \"1.25rem\",\n        float : \"right\",\n        letterSpacing : \"-3px\",\n        textAlign : \"right\",\n        lineHeight : \"28px\"\n    },\n    score : {\n        fontSize : \"1.7rem\"\n    }\n}\n\nfunction Scoreboard(props) {\n    return (\n        <div style={styles.scoreBoard}>\n            <div>CURRENT SCORE: <span style={styles.score}>{props.score}</span></div>\n            <div>HIGH SCORE: <span style={styles.score}>{props.highScore}</span></div>\n        </div>\n        );\n};\n\nexport default Scoreboard;","import React from \"react\";\nimport Scoreboard from \"../../components/Scoreboard\";\n\nconst styles = {\n    jumbotron : {\n        margin : 0,\n        borderRadius : 0,\n        padding : \"1rem 0\",\n        backgroundColor : \"transparent\"\n    },\n    instructions : {\n        margin : 0\n    },\n    title : {\n        fontFamily : \"Super Mario\",\n        fontKerning : \"10px\",\n        color : \"rgb(96, 165, 238)\",\n        letterSpacing : \"5px\",\n        WebkitTextStroke : \"2px black\",\n        textShadow : \"27px 14px 1px #2607bb\",\n        fontSize : \"5rem\",\n        textAlign : \"center\"\n    },\n    container : {\n        padding: 0\n    }\n}\n\nfunction Header(props) {\n    return (\n        <div style={styles.jumbotron} className=\"jumbotron jumbotron-fluid\">\n            <div style={styles.container} className=\"container\">\n                <h1 style={styles.title} className=\"display-4\">Mario Memory</h1>\n                <Scoreboard score={props.score} highScore={props.highScore}/>\n                <div style={styles.instructions} className=\"lead\">click an image to earn a point.</div>\n                <div style={styles.instructions} className=\"lead\">do not click an image twice.</div>\n            </div>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nconst styles = {\n    gif : {\n        display: \"block\",\n        margin: \"0 auto\",\n        maxWidth: \"300px\"\n    }\n}\n\nexport default function GameModal(props) {\n        return (\n            <Modal aria-labelledby=\"contained-modal-title-vcenter\" show={props.showModal} centered\n            >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                {props.modalTitle}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img style={styles.gif} src={props.modalGif} alt=\"gif\" />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.hideModal}>Close</Button>\n            </Modal.Footer>\n            </Modal>\n    )\n\n}\n","import React from 'react'\n\nexport default function MusicBed() {\n    return (\n        <audio id=\"music-bed\" src=\"./sounds/music_bed.mp3\" type=\"audio/mp3\" loop autoPlay />\n    )\n}\n","import React, { Component } from \"react\";\nimport Grid from \"./components/Grid\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport GameModal from \"./components/Modal\";\nimport MusicBed from \"./components/MusicBed\";\nimport characters from \"./characters.json\";\nimport gifs from \"./gifs.json\";\n\nclass App extends Component {\n  \n  state = {\n    characters,\n    score: 0,\n    highScore: 0,\n    charactersClicked: [],\n    modalTitle: \"\",\n    modalGif: \"\",\n    showModal: false,\n  };\n\n  // On card click, shuffle the card and calculate the game based on the score and the cards that have been clicked\n  handlerCardClick = (event) => {\n    let id = event.target.id;\n    this.handlerCardShuffle(characters);\n    this.handlerGameCalculation(this.state.charactersClicked, id);\n  };\n\n  handlerCardShuffle = (arr) => {\n    // Shuffle an array.\n    // Source: https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  handlerHideModal = () => {\n    this.setState({ showModal: false })\n  }\n\n  handlerGameCalculation = (arr, id) => {\n\n    // If the clicked card is in the guess array = Game Over.\n    if (arr.includes(id)) {\n      // Randomize loss gif.\n      let gif = gifs[1].loss[Math.floor(Math.random() * 5)];\n      this.setState({\n        score: 0,\n        charactersClicked: [],\n        modalGif: gif,\n        modalTitle: \"Game Over!\",\n        showModal: true\n      });\n      // If this current score is greater than the high score, set the new high score.\n      if (this.state.highScore < this.state.score) {\n        this.setState({\n          highScore: this.state.score\n        });\n      }\n    // Else, increment and set the current score.\n    } else {\n      let score = this.state.score + 1;\n      this.setState({\n        score: score\n      });\n      // If the current score is 15 = Win.\n      if (score === 15) {\n        // Randomize loss win.\n        let gif = gifs[0].win[Math.floor(Math.random() * 5)];\n        this.setState({\n          highScore: 15,\n          score: 0,\n          charactersClicked: [],\n          modalGif: gif,\n          modalTitle: \"You Win!\",\n          showModal: true\n        });\n      }\n    }\n    \n    // Push the clicked card to the guessed array.\n    this.state.charactersClicked.push(id);\n\n  }\n  \n  render() {\n\n    return (\n      <div>\n      {/* Parent element to the child, scoreboard. */}\n      <Header score={this.state.score} highScore={this.state.highScore} />\n        <Wrapper>\n          {/* Grid to house each card. */}\n          <Grid handlerGameCalculation={this.handlerGameCalculation} handlerCardClick={this.handlerCardClick} characters={this.state.characters} />\n        </Wrapper>\n        <GameModal close={this.handlerCloseModal} onHide={this.close} modalTitle={this.state.modalTitle} modalGif={this.state.modalGif} showModal={this.state.showModal} hideModal={this.handlerHideModal} />\n        <MusicBed />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}